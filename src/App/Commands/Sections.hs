{-# LANGUAGE OverloadedStrings #-}
module App.Commands.Sections (sectionsP, SectionsCmd(..), handleSections) where

import Options.Applicative
import qualified Data.Text as T
import Infra.DB.Pool (DbPool, withConn)
import qualified Domain.Section as DSec
import UseCases.Sections

data SectionsCmd
  = SList
  | SAdd { sname :: String, sdescr :: String }
  | SDel { secid :: Int }
  | SEdit { seid2 :: Int, snameE :: Maybe String, sdescrE :: Maybe String }
  deriving (Show)

sectionsP :: Parser SectionsCmd
sectionsP = hsubparser $
  command "list" (info (pure SList) (progDesc "–°–ø–∏—Å–æ–∫ —Å–µ–∫—Ü—ñ–π")) <>
  command "add"  (info sAdd (progDesc "–î–æ–¥–∞—Ç–∏ —Å–µ–∫—Ü—ñ—é")) <>
  command "del"  (info sDel (progDesc "–í–∏–¥–∞–ª–∏—Ç–∏ —Å–µ–∫—Ü—ñ—é")) <>
  command "edit" (info sEdit (progDesc "–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Å–µ–∫—Ü—ñ—é"))
  where
    sAdd = SAdd
      <$> strOption (long "name" <> help "–ù–∞–∑–≤–∞ —Å–µ–∫—Ü—ñ—ó")
      <*> strOption (long "descr" <> help "–û–ø–∏—Å")
    sDel = SDel <$> option auto (long "id" <> help "ID —Å–µ–∫—Ü—ñ—ó")
    sEdit = SEdit
      <$> option auto (long "id" <> help "ID —Å–µ–∫—Ü—ñ—ó")
      <*> optional (strOption (long "name"))
      <*> optional (strOption (long "descr"))

handleSections :: DbPool -> SectionsCmd -> IO ()
handleSections pool cmd =
  withConn pool $ \conn -> case cmd of
    SList -> do
      xs <- listSections conn
      if null xs then putStrLn "–°–µ–∫—Ü—ñ–π –Ω–µ–º–∞—î."
      else mapM_ (\s -> putStrLn $ show (DSec.sectionId s) <> " | " <> T.unpack (DSec.sectionName s)) xs
    SAdd nm ds -> addSection conn (T.pack nm) (T.pack ds) >> putStrLn "‚úÖ –°–µ–∫—Ü—ñ—é –¥–æ–¥–∞–Ω–æ."
    SDel i -> deleteSection conn i >> putStrLn "üóëÔ∏è  –°–µ–∫—Ü—ñ—é –≤–∏–¥–∞–ª–µ–Ω–æ."
    SEdit sid mname mdescr ->
      editSection conn sid (fmap T.pack mname) (fmap T.pack mdescr)
               >> putStrLn "‚úèÔ∏è  –°–µ–∫—Ü—ñ—é –æ–Ω–æ–≤–ª–µ–Ω–æ."
