{-# LANGUAGE OverloadedStrings #-}
module App.Commands.Students (studentsP, StudentsCmd(..), handleStudents) where

import Options.Applicative
import qualified Data.Text as T
import Infra.DB.Pool (DbPool, withConn)
import qualified Domain.Student as DS
import UseCases.Students

data StudentsCmd
  = StList
  | StAdd { sf :: String, sl :: String, sgroup :: String, semail :: String, sbirth :: String }
  | StDel { sid :: Int }
  | StEdit { seid :: Int
           , sef  :: Maybe String
           , sel  :: Maybe String
           , segr :: Maybe String
           , seem :: Maybe String
           , seb  :: Maybe String
           }
  deriving (Show)

studentsP :: Parser StudentsCmd
studentsP = hsubparser $
  command "list" (info (pure StList) (progDesc "–°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤")) <>
  command "add"  (info stAdd (progDesc "–î–æ–¥–∞—Ç–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞")) <>
  command "del"  (info stDel (progDesc "–í–∏–¥–∞–ª–∏—Ç–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞")) <>
  command "edit" (info stEdit (progDesc "–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞"))
  where
    stAdd = StAdd
      <$> strOption (long "first" <> help "–Ü–º'—è")
      <*> strOption (long "last" <> help "–ü—Ä—ñ–∑–≤–∏—â–µ")
      <*> strOption (long "group" <> help "–ì—Ä—É–ø–∞")
      <*> strOption (long "email" <> help "Email")
      <*> strOption (long "birth" <> help "–î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è YYYY-MM-DD")
    stDel = StDel <$> option auto (long "id" <> help "ID —Å—Ç—É–¥–µ–Ω—Ç–∞")
    stEdit = StEdit
      <$> option auto (long "id" <> help "ID —Å—Ç—É–¥–µ–Ω—Ç–∞")
      <*> optional (strOption (long "first"))
      <*> optional (strOption (long "last"))
      <*> optional (strOption (long "group"))
      <*> optional (strOption (long "email"))
      <*> optional (strOption (long "birth"))

handleStudents :: DbPool -> StudentsCmd -> IO ()
handleStudents pool cmd =
  withConn pool $ \conn -> case cmd of
    StList -> do
      xs <- listStudents conn
      if null xs then putStrLn "–°—Ç—É–¥–µ–Ω—Ç—ñ–≤ –Ω–µ–º–∞—î."
      else mapM_ (\s -> putStrLn $
           show (DS.studentId s) <> " | "
        <> T.unpack (DS.firstName s <> " " <> DS.lastName s)
        <> " | " <> T.unpack (DS.groupCode s)) xs
    StAdd f l g e b -> addStudent conn (T.pack f) (T.pack l) (T.pack g) (T.pack e) (read b)
                    >> putStrLn "‚úÖ –°—Ç—É–¥–µ–Ω—Ç–∞ –¥–æ–¥–∞–Ω–æ."
    StDel i -> deleteStudent conn i >> putStrLn "üóëÔ∏è  –°—Ç—É–¥–µ–Ω—Ç–∞ –≤–∏–¥–∞–ª–µ–Ω–æ."
    StEdit sid mf ml mg me mb -> editStudent conn sid
                                (fmap T.pack mf) (fmap T.pack ml)
                                (fmap T.pack mg) (fmap T.pack me)
                                (fmap read mb)
                             >> putStrLn "‚úèÔ∏è  –°—Ç—É–¥–µ–Ω—Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–æ."
